DDD(Domain Drive Design)：领域驱动设计
	DDD是一种综合软件系统分析和设计的面向对象建模方法，
	旨在帮我们设计高质量的软件模型，是一种解决复杂中大型软件的一套行之有效的方式。
领域：
	一个领域本质上可以理解为就是一个问题域，只要是同一个领域，那问题域就相同。
	所以，只要我们确定了系统所属的领域，那这个系统的核心业务，
	即要解决的关键问题、问题的范围边界就基本确定了。
	子域：
		将一个复杂的领域进行拆分简化为一个个的子域。
		核心子域：系统的核心价值所在,最能体现系统价值的区域。
		通用子域：服务于整个业务员领域的区域,如日志区域,专门用于记录系统日志。
		支持子域：作用于系统的某个重要业务而非核心业务。关注业务的某一方面用于完善系统业务。
通用语言：
	对一个特定场景下的描述、术语、语句都可以算是通用语言。
	通用语言中：名称=概念、形容词用于描述概念、动词=行为
	好处：
		使开发和领域专家使用同一个语言进行沟通,开发出的产品更能符合需求。
		且代码更具业务可读性。
实体：
	实体讲究唯一性,每一个实体都是唯一的,且可以持续发生变化的。
	唯一标识符：表示一个实体唯一标识的字段,可以是多个字段。必须是不变的。
	委派标识：单实体的唯一标识和数据库中的唯一标识不是同一字段时,可以指定一个字段对应数据库中的列。
值对象：
	度量和描述：
				一个值对象应该是一个修饰对象,用于对某些行为或者特征进行修饰
				如：一个人的年龄,关注点应该是一个人,年龄只是修饰。
	不变性：
				一个值对象,构建后就不允许进行修改,不对外提供修改的方法。
	整体概念：
				一个值对象,可以是单个属性或者一组相关联的属性。
				每一个值对象都是一个内聚的概念整体,表示了通用语言中的一个概念。
	可替换性：
				值对象不可以进行修改,但可以进行整体的替换。
				但一个实体中包含的值对象不能正确的描述当前的状态,
				那么就应该把整个值对象进行替换,而不是修改值对象的属性值。
	值对象相等：
				2个不同实例的值对象比较时,应该通过比较2个值对象的类型和属性来决定,
				但2个值对象的类型和属性值都相对时,那这2个值对象就是相等的,
				就可以用一个值对象替换另一个值对象。
	无副作用行为：
				一个值对象的所有行为都不能对当前的值对象做任何的修改。但可以产生一个新的值对象。
	最小化集成：限界上下文间集成,可以通过下游的防腐层访问上游的开发主机服务,之间通过值对象进行通信。
				保证不将限界上下文中的概念溢出。
	使用值对象表示标准类型：在java中可以使用枚举来实现。也可以使用值对象